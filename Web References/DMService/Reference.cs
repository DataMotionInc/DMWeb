//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace DMWebLib.DMService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CMv4Soap", Namespace="https://ssl.certifiedmail.com/CMv4")]
    public partial class CMv4 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInboxMIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInboxMIMEMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInboxMIMEMessageEncodedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMIMEMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMIMEMessageEncodedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailboxXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMIMEMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInTransitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteInboxMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetractMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetInTransitOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CMv4() {
            this.Url = global::DMWebLib.Properties.Settings.Default.CSharpSDKLib_DMService_CMv4;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LogonCompletedEventHandler LogonCompleted;
        
        /// <remarks/>
        public event GetInboxMIDsCompletedEventHandler GetInboxMIDsCompleted;
        
        /// <remarks/>
        public event GetInboxMIMEMessageCompletedEventHandler GetInboxMIMEMessageCompleted;
        
        /// <remarks/>
        public event GetInboxMIMEMessageEncodedCompletedEventHandler GetInboxMIMEMessageEncodedCompleted;
        
        /// <remarks/>
        public event SendMIMEMessageCompletedEventHandler SendMIMEMessageCompleted;
        
        /// <remarks/>
        public event SendMIMEMessageEncodedCompletedEventHandler SendMIMEMessageEncodedCompleted;
        
        /// <remarks/>
        public event GetMailboxXMLCompletedEventHandler GetMailboxXMLCompleted;
        
        /// <remarks/>
        public event GetMIMEMessageCompletedEventHandler GetMIMEMessageCompleted;
        
        /// <remarks/>
        public event GetFolderListCompletedEventHandler GetFolderListCompleted;
        
        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;
        
        /// <remarks/>
        public event DeleteMessageCompletedEventHandler DeleteMessageCompleted;
        
        /// <remarks/>
        public event GetInTransitCompletedEventHandler GetInTransitCompleted;
        
        /// <remarks/>
        public event GetAccountDetailsCompletedEventHandler GetAccountDetailsCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event DeleteInboxMessageCompletedEventHandler DeleteInboxMessageCompleted;
        
        /// <remarks/>
        public event DeleteFolderCompletedEventHandler DeleteFolderCompleted;
        
        /// <remarks/>
        public event MoveMessageCompletedEventHandler MoveMessageCompleted;
        
        /// <remarks/>
        public event RetractMessageCompletedEventHandler RetractMessageCompleted;
        
        /// <remarks/>
        public event SetInTransitCompletedEventHandler SetInTransitCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/Logon", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Logon(string UserIDorEmail, string Password) {
            object[] results = this.Invoke("Logon", new object[] {
                        UserIDorEmail,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogonAsync(string UserIDorEmail, string Password) {
            this.LogonAsync(UserIDorEmail, Password, null);
        }
        
        /// <remarks/>
        public void LogonAsync(string UserIDorEmail, string Password, object userState) {
            if ((this.LogonOperationCompleted == null)) {
                this.LogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogonOperationCompleted);
            }
            this.InvokeAsync("Logon", new object[] {
                        UserIDorEmail,
                        Password}, this.LogonOperationCompleted, userState);
        }
        
        private void OnLogonOperationCompleted(object arg) {
            if ((this.LogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogonCompleted(this, new LogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/GetInboxMIDs", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetInboxMIDs(string SessionKey, int FolderID, int Filter, bool MustHaveAttachments, ref int[] MsIDs) {
            object[] results = this.Invoke("GetInboxMIDs", new object[] {
                        SessionKey,
                        FolderID,
                        Filter,
                        MustHaveAttachments,
                        MsIDs});
            MsIDs = ((int[])(results[1]));
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInboxMIDsAsync(string SessionKey, int FolderID, int Filter, bool MustHaveAttachments, int[] MsIDs) {
            this.GetInboxMIDsAsync(SessionKey, FolderID, Filter, MustHaveAttachments, MsIDs, null);
        }
        
        /// <remarks/>
        public void GetInboxMIDsAsync(string SessionKey, int FolderID, int Filter, bool MustHaveAttachments, int[] MsIDs, object userState) {
            if ((this.GetInboxMIDsOperationCompleted == null)) {
                this.GetInboxMIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInboxMIDsOperationCompleted);
            }
            this.InvokeAsync("GetInboxMIDs", new object[] {
                        SessionKey,
                        FolderID,
                        Filter,
                        MustHaveAttachments,
                        MsIDs}, this.GetInboxMIDsOperationCompleted, userState);
        }
        
        private void OnGetInboxMIDsOperationCompleted(object arg) {
            if ((this.GetInboxMIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInboxMIDsCompleted(this, new GetInboxMIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/GetInboxMIMEMessage", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInboxMIMEMessage(string SessionKey, int MID) {
            object[] results = this.Invoke("GetInboxMIMEMessage", new object[] {
                        SessionKey,
                        MID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInboxMIMEMessageAsync(string SessionKey, int MID) {
            this.GetInboxMIMEMessageAsync(SessionKey, MID, null);
        }
        
        /// <remarks/>
        public void GetInboxMIMEMessageAsync(string SessionKey, int MID, object userState) {
            if ((this.GetInboxMIMEMessageOperationCompleted == null)) {
                this.GetInboxMIMEMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInboxMIMEMessageOperationCompleted);
            }
            this.InvokeAsync("GetInboxMIMEMessage", new object[] {
                        SessionKey,
                        MID}, this.GetInboxMIMEMessageOperationCompleted, userState);
        }
        
        private void OnGetInboxMIMEMessageOperationCompleted(object arg) {
            if ((this.GetInboxMIMEMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInboxMIMEMessageCompleted(this, new GetInboxMIMEMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/GetInboxMIMEMessageEncoded", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInboxMIMEMessageEncoded(string SessionKey, int MID) {
            object[] results = this.Invoke("GetInboxMIMEMessageEncoded", new object[] {
                        SessionKey,
                        MID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInboxMIMEMessageEncodedAsync(string SessionKey, int MID) {
            this.GetInboxMIMEMessageEncodedAsync(SessionKey, MID, null);
        }
        
        /// <remarks/>
        public void GetInboxMIMEMessageEncodedAsync(string SessionKey, int MID, object userState) {
            if ((this.GetInboxMIMEMessageEncodedOperationCompleted == null)) {
                this.GetInboxMIMEMessageEncodedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInboxMIMEMessageEncodedOperationCompleted);
            }
            this.InvokeAsync("GetInboxMIMEMessageEncoded", new object[] {
                        SessionKey,
                        MID}, this.GetInboxMIMEMessageEncodedOperationCompleted, userState);
        }
        
        private void OnGetInboxMIMEMessageEncodedOperationCompleted(object arg) {
            if ((this.GetInboxMIMEMessageEncodedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInboxMIMEMessageEncodedCompleted(this, new GetInboxMIMEMessageEncodedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/SendMIMEMessage", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMIMEMessage(string SessionKey, string Message) {
            object[] results = this.Invoke("SendMIMEMessage", new object[] {
                        SessionKey,
                        Message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMIMEMessageAsync(string SessionKey, string Message) {
            this.SendMIMEMessageAsync(SessionKey, Message, null);
        }
        
        /// <remarks/>
        public void SendMIMEMessageAsync(string SessionKey, string Message, object userState) {
            if ((this.SendMIMEMessageOperationCompleted == null)) {
                this.SendMIMEMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMIMEMessageOperationCompleted);
            }
            this.InvokeAsync("SendMIMEMessage", new object[] {
                        SessionKey,
                        Message}, this.SendMIMEMessageOperationCompleted, userState);
        }
        
        private void OnSendMIMEMessageOperationCompleted(object arg) {
            if ((this.SendMIMEMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMIMEMessageCompleted(this, new SendMIMEMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/SendMIMEMessageEncoded", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMIMEMessageEncoded(string SessionKey, string Message) {
            object[] results = this.Invoke("SendMIMEMessageEncoded", new object[] {
                        SessionKey,
                        Message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMIMEMessageEncodedAsync(string SessionKey, string Message) {
            this.SendMIMEMessageEncodedAsync(SessionKey, Message, null);
        }
        
        /// <remarks/>
        public void SendMIMEMessageEncodedAsync(string SessionKey, string Message, object userState) {
            if ((this.SendMIMEMessageEncodedOperationCompleted == null)) {
                this.SendMIMEMessageEncodedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMIMEMessageEncodedOperationCompleted);
            }
            this.InvokeAsync("SendMIMEMessageEncoded", new object[] {
                        SessionKey,
                        Message}, this.SendMIMEMessageEncodedOperationCompleted, userState);
        }
        
        private void OnSendMIMEMessageEncodedOperationCompleted(object arg) {
            if ((this.SendMIMEMessageEncodedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMIMEMessageEncodedCompleted(this, new SendMIMEMessageEncodedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/GetMailboxXML", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMailboxXML(string SessionKey, int MailboxType, int PageNum, string OrderBy, int FolderID, string Filter, int PageSize, bool OrderDesc, bool GetRetractedMsgs, bool GetInboxUnReadOnly) {
            object[] results = this.Invoke("GetMailboxXML", new object[] {
                        SessionKey,
                        MailboxType,
                        PageNum,
                        OrderBy,
                        FolderID,
                        Filter,
                        PageSize,
                        OrderDesc,
                        GetRetractedMsgs,
                        GetInboxUnReadOnly});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMailboxXMLAsync(string SessionKey, int MailboxType, int PageNum, string OrderBy, int FolderID, string Filter, int PageSize, bool OrderDesc, bool GetRetractedMsgs, bool GetInboxUnReadOnly) {
            this.GetMailboxXMLAsync(SessionKey, MailboxType, PageNum, OrderBy, FolderID, Filter, PageSize, OrderDesc, GetRetractedMsgs, GetInboxUnReadOnly, null);
        }
        
        /// <remarks/>
        public void GetMailboxXMLAsync(string SessionKey, int MailboxType, int PageNum, string OrderBy, int FolderID, string Filter, int PageSize, bool OrderDesc, bool GetRetractedMsgs, bool GetInboxUnReadOnly, object userState) {
            if ((this.GetMailboxXMLOperationCompleted == null)) {
                this.GetMailboxXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailboxXMLOperationCompleted);
            }
            this.InvokeAsync("GetMailboxXML", new object[] {
                        SessionKey,
                        MailboxType,
                        PageNum,
                        OrderBy,
                        FolderID,
                        Filter,
                        PageSize,
                        OrderDesc,
                        GetRetractedMsgs,
                        GetInboxUnReadOnly}, this.GetMailboxXMLOperationCompleted, userState);
        }
        
        private void OnGetMailboxXMLOperationCompleted(object arg) {
            if ((this.GetMailboxXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailboxXMLCompleted(this, new GetMailboxXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/GetMIMEMessage", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMIMEMessage(string SessionKey, int MID, bool WithCMHeaderXML, bool WithTrackingXML, bool WithSecurityEnvelope) {
            object[] results = this.Invoke("GetMIMEMessage", new object[] {
                        SessionKey,
                        MID,
                        WithCMHeaderXML,
                        WithTrackingXML,
                        WithSecurityEnvelope});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMIMEMessageAsync(string SessionKey, int MID, bool WithCMHeaderXML, bool WithTrackingXML, bool WithSecurityEnvelope) {
            this.GetMIMEMessageAsync(SessionKey, MID, WithCMHeaderXML, WithTrackingXML, WithSecurityEnvelope, null);
        }
        
        /// <remarks/>
        public void GetMIMEMessageAsync(string SessionKey, int MID, bool WithCMHeaderXML, bool WithTrackingXML, bool WithSecurityEnvelope, object userState) {
            if ((this.GetMIMEMessageOperationCompleted == null)) {
                this.GetMIMEMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMIMEMessageOperationCompleted);
            }
            this.InvokeAsync("GetMIMEMessage", new object[] {
                        SessionKey,
                        MID,
                        WithCMHeaderXML,
                        WithTrackingXML,
                        WithSecurityEnvelope}, this.GetMIMEMessageOperationCompleted, userState);
        }
        
        private void OnGetMIMEMessageOperationCompleted(object arg) {
            if ((this.GetMIMEMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMIMEMessageCompleted(this, new GetMIMEMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/GetFolderList", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFolderList(string SessionKey) {
            object[] results = this.Invoke("GetFolderList", new object[] {
                        SessionKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderListAsync(string SessionKey) {
            this.GetFolderListAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetFolderListAsync(string SessionKey, object userState) {
            if ((this.GetFolderListOperationCompleted == null)) {
                this.GetFolderListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderListOperationCompleted);
            }
            this.InvokeAsync("GetFolderList", new object[] {
                        SessionKey}, this.GetFolderListOperationCompleted, userState);
        }
        
        private void OnGetFolderListOperationCompleted(object arg) {
            if ((this.GetFolderListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderListCompleted(this, new GetFolderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/CreateFolder", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateFolder(string SessionKey, int FolderType, string FolderName) {
            object[] results = this.Invoke("CreateFolder", new object[] {
                        SessionKey,
                        FolderType,
                        FolderName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string SessionKey, int FolderType, string FolderName) {
            this.CreateFolderAsync(SessionKey, FolderType, FolderName, null);
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string SessionKey, int FolderType, string FolderName, object userState) {
            if ((this.CreateFolderOperationCompleted == null)) {
                this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderOperationCompleted);
            }
            this.InvokeAsync("CreateFolder", new object[] {
                        SessionKey,
                        FolderType,
                        FolderName}, this.CreateFolderOperationCompleted, userState);
        }
        
        private void OnCreateFolderOperationCompleted(object arg) {
            if ((this.CreateFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/DeleteMessage", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteMessage(string SessionKey, int FolderType, int MID, bool PermanentlyDelete) {
            object[] results = this.Invoke("DeleteMessage", new object[] {
                        SessionKey,
                        FolderType,
                        MID,
                        PermanentlyDelete});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string SessionKey, int FolderType, int MID, bool PermanentlyDelete) {
            this.DeleteMessageAsync(SessionKey, FolderType, MID, PermanentlyDelete, null);
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(string SessionKey, int FolderType, int MID, bool PermanentlyDelete, object userState) {
            if ((this.DeleteMessageOperationCompleted == null)) {
                this.DeleteMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteMessage", new object[] {
                        SessionKey,
                        FolderType,
                        MID,
                        PermanentlyDelete}, this.DeleteMessageOperationCompleted, userState);
        }
        
        private void OnDeleteMessageOperationCompleted(object arg) {
            if ((this.DeleteMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageCompleted(this, new DeleteMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/GetInTransit", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInTransit(string SessionKey, int FolderType, int MID) {
            object[] results = this.Invoke("GetInTransit", new object[] {
                        SessionKey,
                        FolderType,
                        MID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInTransitAsync(string SessionKey, int FolderType, int MID) {
            this.GetInTransitAsync(SessionKey, FolderType, MID, null);
        }
        
        /// <remarks/>
        public void GetInTransitAsync(string SessionKey, int FolderType, int MID, object userState) {
            if ((this.GetInTransitOperationCompleted == null)) {
                this.GetInTransitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInTransitOperationCompleted);
            }
            this.InvokeAsync("GetInTransit", new object[] {
                        SessionKey,
                        FolderType,
                        MID}, this.GetInTransitOperationCompleted, userState);
        }
        
        private void OnGetInTransitOperationCompleted(object arg) {
            if ((this.GetInTransitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInTransitCompleted(this, new GetInTransitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/GetAccountDetails", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountDetails(string SessionKey) {
            object[] results = this.Invoke("GetAccountDetails", new object[] {
                        SessionKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountDetailsAsync(string SessionKey) {
            this.GetAccountDetailsAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetAccountDetailsAsync(string SessionKey, object userState) {
            if ((this.GetAccountDetailsOperationCompleted == null)) {
                this.GetAccountDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountDetailsOperationCompleted);
            }
            this.InvokeAsync("GetAccountDetails", new object[] {
                        SessionKey}, this.GetAccountDetailsOperationCompleted, userState);
        }
        
        private void OnGetAccountDetailsOperationCompleted(object arg) {
            if ((this.GetAccountDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountDetailsCompleted(this, new GetAccountDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/Logout", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logout(string SessionKey) {
            this.Invoke("Logout", new object[] {
                        SessionKey});
        }
        
        /// <remarks/>
        public void LogoutAsync(string SessionKey) {
            this.LogoutAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(string SessionKey, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        SessionKey}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/DeleteInboxMessage", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteInboxMessage(string SessionKey, int MID) {
            this.Invoke("DeleteInboxMessage", new object[] {
                        SessionKey,
                        MID});
        }
        
        /// <remarks/>
        public void DeleteInboxMessageAsync(string SessionKey, int MID) {
            this.DeleteInboxMessageAsync(SessionKey, MID, null);
        }
        
        /// <remarks/>
        public void DeleteInboxMessageAsync(string SessionKey, int MID, object userState) {
            if ((this.DeleteInboxMessageOperationCompleted == null)) {
                this.DeleteInboxMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteInboxMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteInboxMessage", new object[] {
                        SessionKey,
                        MID}, this.DeleteInboxMessageOperationCompleted, userState);
        }
        
        private void OnDeleteInboxMessageOperationCompleted(object arg) {
            if ((this.DeleteInboxMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteInboxMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/DeleteFolder", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFolder(string SessionKey, int FID) {
            this.Invoke("DeleteFolder", new object[] {
                        SessionKey,
                        FID});
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string SessionKey, int FID) {
            this.DeleteFolderAsync(SessionKey, FID, null);
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string SessionKey, int FID, object userState) {
            if ((this.DeleteFolderOperationCompleted == null)) {
                this.DeleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteFolder", new object[] {
                        SessionKey,
                        FID}, this.DeleteFolderOperationCompleted, userState);
        }
        
        private void OnDeleteFolderOperationCompleted(object arg) {
            if ((this.DeleteFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/MoveMessage", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveMessage(string SessionKey, int MID, int DestFID) {
            this.Invoke("MoveMessage", new object[] {
                        SessionKey,
                        MID,
                        DestFID});
        }
        
        /// <remarks/>
        public void MoveMessageAsync(string SessionKey, int MID, int DestFID) {
            this.MoveMessageAsync(SessionKey, MID, DestFID, null);
        }
        
        /// <remarks/>
        public void MoveMessageAsync(string SessionKey, int MID, int DestFID, object userState) {
            if ((this.MoveMessageOperationCompleted == null)) {
                this.MoveMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveMessageOperationCompleted);
            }
            this.InvokeAsync("MoveMessage", new object[] {
                        SessionKey,
                        MID,
                        DestFID}, this.MoveMessageOperationCompleted, userState);
        }
        
        private void OnMoveMessageOperationCompleted(object arg) {
            if ((this.MoveMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/RetractMessage", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RetractMessage(string SessionKey, int MID) {
            this.Invoke("RetractMessage", new object[] {
                        SessionKey,
                        MID});
        }
        
        /// <remarks/>
        public void RetractMessageAsync(string SessionKey, int MID) {
            this.RetractMessageAsync(SessionKey, MID, null);
        }
        
        /// <remarks/>
        public void RetractMessageAsync(string SessionKey, int MID, object userState) {
            if ((this.RetractMessageOperationCompleted == null)) {
                this.RetractMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetractMessageOperationCompleted);
            }
            this.InvokeAsync("RetractMessage", new object[] {
                        SessionKey,
                        MID}, this.RetractMessageOperationCompleted, userState);
        }
        
        private void OnRetractMessageOperationCompleted(object arg) {
            if ((this.RetractMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetractMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/SetInTransit", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetInTransit(string SessionKey, int FolderType, int MID, bool InTransitValue) {
            this.Invoke("SetInTransit", new object[] {
                        SessionKey,
                        FolderType,
                        MID,
                        InTransitValue});
        }
        
        /// <remarks/>
        public void SetInTransitAsync(string SessionKey, int FolderType, int MID, bool InTransitValue) {
            this.SetInTransitAsync(SessionKey, FolderType, MID, InTransitValue, null);
        }
        
        /// <remarks/>
        public void SetInTransitAsync(string SessionKey, int FolderType, int MID, bool InTransitValue, object userState) {
            if ((this.SetInTransitOperationCompleted == null)) {
                this.SetInTransitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetInTransitOperationCompleted);
            }
            this.InvokeAsync("SetInTransit", new object[] {
                        SessionKey,
                        FolderType,
                        MID,
                        InTransitValue}, this.SetInTransitOperationCompleted, userState);
        }
        
        private void OnSetInTransitOperationCompleted(object arg) {
            if ((this.SetInTransitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetInTransitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ssl.certifiedmail.com/CMv4/ChangePassword", RequestNamespace="https://ssl.certifiedmail.com/CMv4", ResponseNamespace="https://ssl.certifiedmail.com/CMv4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePassword(string EmailAddr, string NewPassword, string OldPassword) {
            this.Invoke("ChangePassword", new object[] {
                        EmailAddr,
                        NewPassword,
                        OldPassword});
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string EmailAddr, string NewPassword, string OldPassword) {
            this.ChangePasswordAsync(EmailAddr, NewPassword, OldPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string EmailAddr, string NewPassword, string OldPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        EmailAddr,
                        NewPassword,
                        OldPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogonCompletedEventHandler(object sender, LogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetInboxMIDsCompletedEventHandler(object sender, GetInboxMIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInboxMIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInboxMIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int[] MsIDs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetInboxMIMEMessageCompletedEventHandler(object sender, GetInboxMIMEMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInboxMIMEMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInboxMIMEMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetInboxMIMEMessageEncodedCompletedEventHandler(object sender, GetInboxMIMEMessageEncodedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInboxMIMEMessageEncodedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInboxMIMEMessageEncodedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendMIMEMessageCompletedEventHandler(object sender, SendMIMEMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMIMEMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMIMEMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendMIMEMessageEncodedCompletedEventHandler(object sender, SendMIMEMessageEncodedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMIMEMessageEncodedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMIMEMessageEncodedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetMailboxXMLCompletedEventHandler(object sender, GetMailboxXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailboxXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailboxXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetMIMEMessageCompletedEventHandler(object sender, GetMIMEMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMIMEMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMIMEMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFolderListCompletedEventHandler(object sender, GetFolderListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateFolderCompletedEventHandler(object sender, CreateFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteMessageCompletedEventHandler(object sender, DeleteMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetInTransitCompletedEventHandler(object sender, GetInTransitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInTransitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInTransitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAccountDetailsCompletedEventHandler(object sender, GetAccountDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteInboxMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void MoveMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RetractMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SetInTransitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591